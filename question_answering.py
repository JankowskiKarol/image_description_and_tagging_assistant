import difflib
from config import openai_client

def answer_user_question(user_question, faq, improved_description, tags):
    """
    Answers a user question based on an image description, associated tags, and a predefined FAQ.

    The function first checks if the question matches any item in the FAQ.
    If not, it checks whether the question is related to the analyzed image using an LLM.
    If the question is unrelated to both the FAQ and the image, it falls back to a general assistant response.

    Parameters:
        user_question (str): the user's question.
        faq (list): a list of FAQ items, where each item is a dictionary with 'question' and 'answer' keys.
        improved_description (str): a refined image description generated by a language model.
        tags (list): a list of tag dictionaries describing image content.

    Returns:
        str: a direct answer to the user's question.
    """
    
    user_question_lower = user_question.lower()

    # match the question against the FAQ
    best_match = None
    highest_ratio = 0.0
    for item in faq:
        ratio = difflib.SequenceMatcher(None, user_question_lower, item["question"].lower()).ratio()
        if ratio > highest_ratio:
            highest_ratio = ratio
            best_match = item
    if highest_ratio > 0.7:
        return best_match["answer"]

    # check if the question relates to the image description and tags
    context_prompt = f"""
    Image description: {improved_description}
    Tags: {', '.join([tag['name'] for tag in tags])}
    Based on the above image information, answer the question: "{user_question}"
    If the question is not related to the image, reply with: "not_image_related"
    """

    response = openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You answer questions based on image descriptions."},
            {"role": "user", "content": context_prompt}
        ],
        temperature=0,
        max_tokens=150
    )

    raw_answer = response.choices[0].message.content.strip()
    if "not_image_related" in raw_answer.lower():
        # fallback to general assistant if question is unrelated to image or FAQ
        fallback_prompt = f"""
        User question: "{user_question}"
        This question is not related to the image or FAQ. Please answer it as a general assistant.
        """
        fallback_response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a helpful assistant answering general questions."},
                {"role": "user", "content": fallback_prompt}
            ],
            temperature=0.7,
            max_tokens=150
        )
        return f"This question is not related to the image or FAQ. General answer:\n\n{fallback_response.choices[0].message.content.strip()}"
    else:
        return raw_answer


